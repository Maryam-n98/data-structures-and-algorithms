/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static linked.list.LinkedList.zipLists;

class LibraryTest {
    LinkedList<Integer> testList;
    @BeforeEach
    public void init() {
        testList = new LinkedList<>();
    }

    @Test
    public void isEmptyTest() {
        Assertions.assertTrue( testList.size >= 0 );
    }

    @Test
    public void appendTest() {
        testList.append(5);
        testList.append(5);
        Assertions.assertEquals(2, testList.size);

    }


    @Test
    public void insertBeforeAndAfterTest() {
        testList.append(2);
        testList.append(3);
        testList.append(5);
        testList.insertBefore(3 , 5);
        testList.insertAfter(3 , 5);
        Assertions.assertEquals(2 , testList.head.data);
        Assertions.assertEquals(5, testList.size);
        Assertions.assertTrue(testList.includes(5) );
        Assertions.assertFalse(testList.includes(9) );
        Assertions.assertEquals("{ 2 -> 5 -> 3 -> 5 -> 5 -> null }" , String.valueOf(testList));

    }
    @Test
    public void kthTest(){
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.insert(16);
        linkedList.insert(15);
        linkedList.insert(14);
        linkedList.insert(12);
        Assertions.assertEquals(4, linkedList.size);
        Assertions.assertEquals(15,linkedList.kth(1));
        Assertions.assertNull(linkedList.kth(-1));
        Assertions.assertNull(linkedList.kth(5));
    }
    @Test
    public void sizeOneOfLinkedList(){
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.insert(7);
        Assertions.assertEquals(1, linkedList.size);
        Assertions.assertEquals(7,linkedList.kth(0));

    }




    @Test
    public void listOneLargerThanListTwo(){
        LinkedList<Integer> linkedList1 = new LinkedList<>();
        LinkedList<Integer> linkedList2 = new LinkedList<>();
        linkedList1.insert(1);
        linkedList1.insert(2);
        linkedList1.insert(3);
        linkedList2.insert(4);
        linkedList2.insert(5);
        Assertions.assertEquals(3, linkedList1.size);
        Assertions.assertEquals(2, linkedList2.size);
        Assertions.assertEquals(5, zipLists(linkedList1, linkedList2).size);
        Assertions.assertEquals("{ 3 -> 5 -> 2 -> 4 -> 1 -> null }" , zipLists(linkedList1, linkedList2).toString());
    }
    @Test
    public void listTwoLargerThanListOne(){
        LinkedList<Integer> linkedList1 = new LinkedList<>();
        LinkedList<Integer> linkedList2 = new LinkedList<>();
        linkedList1.insert(7);
        linkedList1.insert(8);
        linkedList2.insert(6);
        linkedList2.insert(45);
        linkedList2.insert(5);
        Assertions.assertEquals(2, linkedList1.size);
        Assertions.assertEquals(3, linkedList2.size);
        Assertions.assertEquals(5, zipLists(linkedList1, linkedList2).size);
        Assertions.assertEquals("{ 8 -> 5 -> 7 -> 45 -> 6 -> null }" , zipLists(linkedList1, linkedList2).toString());

    }
}
