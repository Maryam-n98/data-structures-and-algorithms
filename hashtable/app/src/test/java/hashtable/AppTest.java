/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import binaryTree.BinaryTree;
import binaryTree.NodeTree;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import static hashtable.HashTable.leftJoin;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test
    public void test(){

        HashTable<String, Integer> studentAllowances = new HashTable<String, Integer>();

        assertTrue(studentAllowances.isEmpty());

    }
    @Test
    public void testAdd() {

        HashTable<String, Integer> studentAllowances = new HashTable<String, Integer>();
        studentAllowances.add("Tom",500);
        assertEquals(1,studentAllowances.getSize());

    }
    @Test
    public void testEmpty() {

        HashTable<String, Integer> studentAllowances = new HashTable<String, Integer>();

        studentAllowances.add("Tom", 500);
        assertEquals(1,studentAllowances.getSize());
        assertFalse(studentAllowances.isEmpty());
    }
    @Test
    public void testRemove() {

        HashTable<String, Integer> studentAllowances = new HashTable<String, Integer>();
        studentAllowances.add("Tom", 200);
        assertEquals(1,studentAllowances.getSize());
        studentAllowances.remove("Tom");
        assertEquals(0,studentAllowances.getSize());
    }

    @Test
    public void testContains() {

        HashTable<String, Integer> studentAllowances = new HashTable<String, Integer>();
        studentAllowances.add("Tom",100);
        assertTrue(studentAllowances.contains("Tom"));
        assertFalse(studentAllowances.contains("Sally"));
    }

    @Test
    public void repeatedWordTest(){

        HashTable<String, Integer> test = new HashTable<String, Integer>();

        String p1 = "Once upon a time, there was a brave princess who...";
        assertEquals("a", test.repeatedWord(p1));

//        String paragraph3= "It was a queer,  sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York";
//        assertEquals("summer", test.repeatedWord(paragraph3));

    }
    @Test
    public void repeatedWordTestP2(){
        HashTable<String, Integer> test = new HashTable<String, Integer>();

        String p2 = "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only";
        assertEquals("it", test.repeatedWord(p2));

    }
    @Test
    public void repeatedWordTestP3(){
        HashTable<String, Integer> test = new HashTable<String, Integer>();
        String p3= "It was a queer,  sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York";
        assertEquals("summer", test.repeatedWord(p3));

    }

    @Test
    public  void repeatedWordTestNoRepeat(){

        HashTable<String, Integer> test = new HashTable<String, Integer>();

        String p = "didn’t know what I was doing in New York";
        assertEquals("no repeated words", test.repeatedWord(p));
    }
    @Test
    public void intersectionTest(){

        HashTable<Integer,Integer> trees = new HashTable<Integer, Integer>();
        BinaryTree tree1 = new BinaryTree();
        BinaryTree tree2 = new BinaryTree();

        tree1.setRoot(new NodeTree(150));
        tree1.getRoot().setLeft(new NodeTree(100));
        tree1.getRoot().setRight(new NodeTree(250));
        tree1.getRoot().getRight().setLeft(new NodeTree(200));
        tree1.getRoot().getRight().setRight(new NodeTree(350));

        tree2.setRoot(new NodeTree(42));
        tree2.getRoot().setLeft(new NodeTree(100));
        tree2.getRoot().setRight(new NodeTree(600));
        tree2.getRoot().getRight().setLeft(new NodeTree(200));
        tree2.getRoot().getRight().setRight(new NodeTree(350));

        assertEquals("[100, 200, 350]", trees.treeIntersection(tree1,tree2).toString());

    }

    @Test
    public void intersectionTestNoResults(){

        HashTable<Integer,Integer> trees = new HashTable<Integer, Integer>();
        BinaryTree tree1 = new BinaryTree();
        BinaryTree tree2 = new BinaryTree();

        tree1.setRoot(new NodeTree(150));
        tree1.getRoot().setLeft(new NodeTree(100));
        tree1.getRoot().setRight(new NodeTree(250));
        tree1.getRoot().getRight().setLeft(new NodeTree(200));
        tree1.getRoot().getRight().setRight(new NodeTree(350));

        tree2.setRoot(new NodeTree(42));
        tree2.getRoot().setLeft(new NodeTree(101));
        tree2.getRoot().setRight(new NodeTree(600));
        tree2.getRoot().getRight().setLeft(new NodeTree(201));
        tree2.getRoot().getRight().setRight(new NodeTree(310));

        assertEquals("[]", trees.treeIntersection(tree1,tree2).toString());

    }

    @Test
    public void intersectionTreeNumOfNodes(){

        HashTable<Integer,Integer> trees = new HashTable<Integer, Integer>();
        BinaryTree tree1 = new BinaryTree();
        BinaryTree tree2 = new BinaryTree();

        tree1.setRoot(new NodeTree(150));
        tree1.getRoot().setLeft(new NodeTree(100));
        tree1.getRoot().setRight(new NodeTree(250));
        tree1.getRoot().getRight().setLeft(new NodeTree(200));
        tree1.getRoot().getRight().setRight(new NodeTree(350));

        tree2.setRoot(new NodeTree(42));
        tree2.getRoot().setLeft(new NodeTree(100));
        tree2.getRoot().setRight(new NodeTree(600));
        tree2.getRoot().getRight().setLeft(new NodeTree(200));

        assertEquals("[100, 200]", trees.treeIntersection(tree1,tree2).toString());

    }
//    CODE CHALLENGE 33
    @Test
    public void testLeftWithAllJoins(){
        HashMap h1 = new HashMap();
        h1.put("fond", "enamored");
        h1.put("wrath", "anger");
        h1.put("flow", "jam");

        HashMap h2 = new HashMap();
        h2.put("fond", "averse");
        h2.put("wrath", "delight");
        h2.put("flow", "test");

        assertEquals("[wrath: anger, delight, flow: jam, test, fond: enamored, averse]", leftJoin(h1, h2).toString());
    }

    @Test
    public void test_leftWithSomeJoins(){
        HashMap h1 = new HashMap();
        h1.put("fond", "enamored");
        h1.put("wrath", "anger");
        h1.put("diligent", "employed");
        h1.put("outfit", "garb");
        h1.put("guide", "usher");

        HashMap h2 = new HashMap();
        h2.put("fond", "averse");
        h2.put("wrath", "delight");
        h2.put("flow", "jam");

        assertEquals("[diligent: employed, null, outfit: garb, null, wrath: anger, delight, guide: usher, null, fond: enamored, averse]",leftJoin(h1, h2).toString());
    }

    @Test
    public void test_leftWithEmptySecondHashMap(){
        HashMap h1 = new HashMap();
        h1.put("fond", "enamored");
        h1.put("wrath", "anger");
        h1.put("diligent", "employed");
        h1.put("outfit", "garb");
        h1.put("guide", "usher");

        HashMap h2 = new HashMap();

        assertEquals("[diligent: employed, null, outfit: garb, null, wrath: anger, null, guide: usher, null, fond: enamored, null]", leftJoin(h1, h2).toString());

    }

    @Test
    public void test_leftBothEmptyHashMap(){
        HashMap h1 = new HashMap();
        HashMap h2 = new HashMap();

        List<String> list = new ArrayList<>();

        assertEquals("[]", leftJoin(h1, h2).toString());

    }

}
