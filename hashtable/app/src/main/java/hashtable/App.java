/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import binaryTree.BinaryTree;
import binaryTree.NodeTree;

import java.util.HashMap;

import static hashtable.HashTable.leftJoin;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        HashTable<String, Integer> studentAllowances = new HashTable<>();
        studentAllowances.add("John", 300);
        studentAllowances.add("Sally", 400);
        studentAllowances.add("Tom", 200);
        studentAllowances.add("Jade", 100);

        System.out.println("The size is => " + studentAllowances.getSize());
        System.out.println("The Sally allowance is => " + studentAllowances.get("Tom"));
        System.out.println("the array is contain Sally " + studentAllowances.contains("Tom"));
        System.out.println("Delete Sally => " + studentAllowances.remove("Tom"));
        System.out.println("The size is => " + studentAllowances.getSize());
        System.out.println("the array is contain Sally " + studentAllowances.contains("Tom"));


        String p1 = "Once upon a time, there was a brave princess who...";
        String p2 = "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only";
        String p3= "It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York";
        System.out.println(studentAllowances.repeatedWord(p1));
        System.out.println(studentAllowances.repeatedWord(p2));
        System.out.println(studentAllowances.repeatedWord(p3));

        HashTable<Integer,Integer> trees = new HashTable<Integer, Integer>();

        BinaryTree tree1 = new BinaryTree();
        BinaryTree tree = new BinaryTree();

        tree1.setRoot(new NodeTree(150));
        tree1.getRoot().setLeft(new NodeTree(100));
        tree1.getRoot().setRight(new NodeTree(250));
        tree1.getRoot().getRight().setLeft(new NodeTree(200));
        tree1.getRoot().getRight().setRight(new NodeTree(350));
        tree1.getRoot().getRight().getRight().setLeft(new NodeTree(300));
        tree1.getRoot().getRight().getRight().setRight(new NodeTree(500));
        tree1.getRoot().getLeft().setLeft(new NodeTree(75));
        tree1.getRoot().getLeft().setRight(new NodeTree(160));
        tree1.getRoot().getLeft().getRight().setLeft(new NodeTree(125));
        tree1.getRoot().getLeft().getRight().setRight(new NodeTree(175));

        tree.setRoot(new NodeTree(42));
        tree.getRoot().setLeft(new NodeTree(100));
        tree.getRoot().setRight(new NodeTree(600));
        tree.getRoot().getRight().setLeft(new NodeTree(200));
        tree.getRoot().getRight().setRight(new NodeTree(350));
        tree.getRoot().getRight().getRight().setLeft(new NodeTree(4));
        tree.getRoot().getRight().getRight().setRight(new NodeTree(500));
        tree.getRoot().getLeft().setLeft(new NodeTree(15));
        tree.getRoot().getLeft().setRight(new NodeTree(160));
        tree.getRoot().getLeft().getRight().setLeft(new NodeTree(125));
        tree.getRoot().getLeft().getRight().setRight(new NodeTree(175));
        System.out.println("hashmap tree intersection:  " +trees.treeIntersection(tree1,tree));

//        code challenge 33

        HashMap<String, String> firstHashMap = new HashMap<>();
        HashMap<String, String> secondHashMap = new HashMap<>();

        firstHashMap.put("fond", "enamored");
        firstHashMap.put("wrath", "anger");
        firstHashMap.put("diligent", "employed");
        firstHashMap.put("outfit", "garb");
        firstHashMap.put("guide", "usher");

        secondHashMap.put("fond", "averse");
        secondHashMap.put("wrath", "delight");
        secondHashMap.put("diligent", "idle");
        secondHashMap.put("guide", "follow");
        secondHashMap.put("flow", "jam");



        System.out.println("Left Join:  " +leftJoin(firstHashMap, secondHashMap));
    }
}
